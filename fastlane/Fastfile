# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

KEYSTORE_PATH = ENV["KEYSTORE_PATH"]
KEYSTORE_KEY_ALIAS = ENV["KEYSTORE_KEY_ALIAS"]
KEYSTORE_KEY_PASSWORD = ENV["KEYSTORE_KEY_PASSWORD"]
KEYSTORE_STORE_PASSWORD = ENV["KEYSTORE_STORE_PASSWORD"]
FIREBASE_APP_ID = ENV["FIREBASE_APP_ID"]
SERVICE_ACCOUNT_PATH = ENV["SERVICE_ACCOUNT_PATH"]
APK_OUTPUT_PATH = "./release.apk"
CACHE_PATH = "./.cache"
PULL_REQUEST_NUMBER = ENV["PULL_REQUEST_NUMBER"]
PULL_REQUEST_TITLE = ENV["PULL_REQUEST_TITLE"]
PUBLIC_BACKEND_URL = ENV["PUBLIC_BACKEND_URL"]


platform :android do

  desc "Deploy github version"
  lane :github do
    sh "pnpm install -g @ionic/cli"
    sh "pnpm install"
    sh "ionic cap sync android"
    sh "ionic cap build android --no-open"
    sh "echo #{PUBLIC_BACKEND_URL}"
    package = load_json(json_path: "./package.json")
    increment_version_code(
      gradle_file_path: "./android/app/build.gradle",
      version_code: package['version'].gsub('.', '').to_i
    )
    increment_version_name(
      gradle_file_path: "./android/app/build.gradle",
      version_name: package['version']
    )
    gradle(
          task: "clean bundleRelease",
          project_dir: 'android/',
          print_command: false,
          properties: {
            "android.injected.signing.store.file" => "#{KEYSTORE_PATH}",
            "android.injected.signing.store.password" => "#{KEYSTORE_STORE_PASSWORD}",
            "android.injected.signing.key.alias" => "#{KEYSTORE_KEY_ALIAS}",
            "android.injected.signing.key.password" => "#{KEYSTORE_KEY_PASSWORD}",
          })
    aab_path = "android/app/build/outputs/bundle/release/app-release.aab"
    bundletool(
      ks_path: KEYSTORE_PATH,
      ks_password: KEYSTORE_STORE_PASSWORD,
      ks_key_alias: KEYSTORE_KEY_ALIAS,
      ks_key_alias_password: KEYSTORE_KEY_PASSWORD,
      bundletool_version: '1.16.0',
      aab_path: aab_path,
      apk_output_path: APK_OUTPUT_PATH,
      verbose: true,
      cache_path: CACHE_PATH
    )
  end

  lane :distribute do
    sh "echo #{PULL_REQUEST_NUMBER}"
    sh "echo #{PUBLIC_BACKEND_URL}"
    sh "pnpm install -g @ionic/cli"
    sh "pnpm install"
    sh "ionic cap sync android"
    sh "ionic cap build android --no-open"
    package = load_json(json_path: "./package.json")
    increment_version_code(
      gradle_file_path: "./android/app/build.gradle",
      version_code: PULL_REQUEST_NUMBER
    )
    increment_version_name(
      gradle_file_path: "./android/app/build.gradle",
      version_name: package['version'] + "-" + PULL_REQUEST_NUMBER
    )
    gradle(
          task: "clean bundleRelease",
          project_dir: 'android/',
          print_command: false,
          properties: {
            "android.injected.signing.store.file" => "#{KEYSTORE_PATH}",
            "android.injected.signing.store.password" => "#{KEYSTORE_STORE_PASSWORD}",
            "android.injected.signing.key.alias" => "#{KEYSTORE_KEY_ALIAS}",
            "android.injected.signing.key.password" => "#{KEYSTORE_KEY_PASSWORD}",
          })
    aab_path = "android/app/build/outputs/bundle/release/app-release.aab"
    bundletool(
      bundletool_version: '1.16.0',
      ks_path: KEYSTORE_PATH,
      ks_password: KEYSTORE_STORE_PASSWORD,
      ks_key_alias: KEYSTORE_KEY_ALIAS,
      ks_key_alias_password: KEYSTORE_KEY_PASSWORD,
      aab_path: aab_path,
      apk_output_path: APK_OUTPUT_PATH,
      verbose: true,
      cache_path: CACHE_PATH
    )

    release = firebase_app_distribution(
        app: FIREBASE_APP_ID,
        service_credentials_file: SERVICE_ACCOUNT_PATH,
        android_artifact_path: APK_OUTPUT_PATH,
        groups: 'dyne',
        release_notes: "#{PULL_REQUEST_TITLE}"
    )
    end
    lane :alpha do
    sh "echo #{PUBLIC_BACKEND_URL}"
    sh "pnpm install -g @ionic/cli"
    sh "pnpm install"
    sh "ionic cap sync android"
    sh "ionic cap build android --no-open"
    package = load_json(json_path: "./package.json")
    internal_latest_version_code = google_play_track_version_codes(
      track: 'alpha', 
      json_key:"#{SERVICE_ACCOUNT_PATH}",
      package_name:"com.didroom.wallet"
    )
    increment_version_code(
      gradle_file_path: "./android/app/build.gradle",
      version_code: internal_latest_version_code.max + 1
    )
    increment_version_name(
      gradle_file_path: "./android/app/build.gradle",
      version_name: package['version'] + "-alpha"
    )
    gradle(
          task: "clean bundleRelease",
          project_dir: 'android/',
          print_command: false,
          properties: {
            "android.injected.signing.store.file" => "#{KEYSTORE_PATH}",
            "android.injected.signing.store.password" => "#{KEYSTORE_STORE_PASSWORD}",
            "android.injected.signing.key.alias" => "#{KEYSTORE_KEY_ALIAS}",
            "android.injected.signing.key.password" => "#{KEYSTORE_KEY_PASSWORD}",
          })

    release = upload_to_play_store(
      json_key:"#{SERVICE_ACCOUNT_PATH}",
      package_name:"com.didroom.wallet",
      aab:"android/app/build/outputs/bundle/release/app-release.aab",
      track: 'alpha',
      metadata_path: "./fastlane/metadata/android",
      skip_upload_apk: true,
      )
    end
    lane :beta do
    sh "echo #{PUBLIC_BACKEND_URL}"
    sh "pnpm install -g @ionic/cli"
    sh "pnpm install"
    sh "ionic cap sync android"
    sh "ionic cap build android --no-open"
    package = load_json(json_path: "./package.json")
    internal_latest_version_code = google_play_track_version_codes(
      track: 'beta', 
      json_key:"#{SERVICE_ACCOUNT_PATH}",
      package_name:"com.didroom.wallet"
    )
    increment_version_code(
      gradle_file_path: "./android/app/build.gradle",
      version_code: internal_latest_version_code.max + 1
    )
    increment_version_name(
      gradle_file_path: "./android/app/build.gradle",
      version_name: package['version'] + "-beta"
    )
    gradle(
          task: "clean bundleRelease",
          project_dir: 'android/',
          print_command: false,
          properties: {
            "android.injected.signing.store.file" => "#{KEYSTORE_PATH}",
            "android.injected.signing.store.password" => "#{KEYSTORE_STORE_PASSWORD}",
            "android.injected.signing.key.alias" => "#{KEYSTORE_KEY_ALIAS}",
            "android.injected.signing.key.password" => "#{KEYSTORE_KEY_PASSWORD}",
          })

    release = upload_to_play_store(
      json_key:"#{SERVICE_ACCOUNT_PATH}",
      package_name:"com.didroom.wallet",
      aab:"android/app/build/outputs/bundle/release/app-release.aab",
      track: 'beta',
      metadata_path: "./fastlane/metadata/android",
      skip_upload_apk: true,
      )
    end
end



platform :ios do
  desc 'Export ipa and submit to TestFlight'
  lane :beta do
    keychain_info = { keychain_name: "ios-build-#{Time.now.to_i}.keychain", keychain_password: SecureRandom.uuid }

    begin
      setup_signing(keychain_info)
      bump_build_number
      build_app_with_signing(keychain_info)
      submit_to_testflight
    ensure
      cleanup_keychain(keychain_info)
    end
  end

  private_lane :setup_signing do |options|
    create_keychain(
      name: options[:keychain_name],
      password: options[:keychain_password],
      unlock: true,
      timeout: 0,
      lock_when_sleeps: false,
      add_to_search_list: true
    )
    import_cert(options)
    install_profile
    update_project_settings
  end

  lane :bump_build_number do
    file = File.read('../package.json')
    data_hash = JSON.parse(file)
    api_key = app_store_connect_api_key(
      key_id: ENV['APPLE_KEY_ID'],
      issuer_id: ENV['APPLE_ISSUER_ID'],
      key_content: Base64.decode64(ENV['APPLE_KEY_CONTENT']),
      duration: 1200,
      in_house: false
    )
    build_num = app_store_build_number(
      api_key: api_key,
      app_identifier: ENV['BUNDLE_IDENTIFIER'],
      live: false
    )
    build_num = build_num + 1
    UI.message("Bumped build number to #{build_num}")
    increment_build_number(
      build_number: build_num,
      xcodeproj: "./ios/App/App.xcodeproj",
      skip_info_plist: true
    )
  end

  private_lane :import_cert do |options|
    cert_path = "#{Dir.tmpdir}/build_certificate.p12"
    File.write(cert_path, Base64.decode64(ENV['BUILD_CERTIFICATE_BASE64']))
    import_certificate(
      certificate_path: cert_path,
      certificate_password: ENV['P12_PASSWORD'] || "",
      keychain_name: options[:keychain_name],
      keychain_password: options[:keychain_password],
      log_output: true
    )
    File.delete(cert_path)
  end

  private_lane :cleanup_keychain do |options|
    delete_keychain(
      name: options[:keychain_name]
    )
  end

  private_lane :install_profile do
    profile_path = "#{Dir.tmpdir}/build_pp.mobileprovision"
    File.write(profile_path, Base64.decode64(ENV['BUILD_PROVISION_PROFILE_BASE64']))
    UI.user_error!("Failed to create provisioning profile at #{profile_path}") unless File.exist?(profile_path)
    ENV['PROVISIONING_PROFILE_PATH'] = profile_path
    install_provisioning_profile(path: profile_path)
    File.delete(profile_path)
  end

  private_lane :update_project_settings do
    update_code_signing_settings(
      use_automatic_signing: false,
      path: "./ios/App/App.xcodeproj",
      code_sign_identity: "iPhone Distribution",
      profile_name: ENV['APPLE_PROFILE_NAME'],
      bundle_identifier: ENV['BUNDLE_IDENTIFIER'],
      team_id: ENV['APP_STORE_CONNECT_TEAM_ID']
    )
    update_project_team(
      path: "./ios/App/App.xcodeproj",
      teamid: ENV['APP_STORE_CONNECT_TEAM_ID']
    )
  end

  private_lane :build_app_with_signing do |options|
    unlock_keychain(
      path: options[:keychain_name],
      password: options[:keychain_password],
      set_default: false
    )
    build_app(
      workspace: "./ios/App/App.xcworkspace",
      scheme: "App",
      configuration: "Release",
      export_method: "app-store",
      output_name: "App.ipa",
      export_options: {
        provisioningProfiles: {
          ENV['BUNDLE_IDENTIFIER'] => ENV['APPLE_PROFILE_NAME']
        }
      },
      xcargs: "-verbose",
      buildlog_path: "./build_logs",
      export_xcargs: "-allowProvisioningUpdates",
    )
  end

  private_lane :submit_to_testflight do
    api_key = app_store_connect_api_key(
      key_id: ENV['APPLE_KEY_ID'],
      issuer_id: ENV['APPLE_ISSUER_ID'],
      key_content: Base64.decode64(ENV['APPLE_KEY_CONTENT']),
      duration: 1200,
      in_house: false
    )
    pilot(
      api_key: api_key,
      skip_waiting_for_build_processing: true,
      skip_submission: true,
      distribute_external: false,
      notify_external_testers: false,
      ipa: "./App.ipa"
    )
  end
end
