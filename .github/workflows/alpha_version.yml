name: ðŸ¤–ðŸŒˆ Droid Alpha Skunkworks

on:
  push:
    branches: ['main']

jobs:
  tests:
    uses: ./.github/workflows/test.yml
    with:
      backend-url: http://localhost:8090
      user-email: ${{ vars.USER_EMAIL }}
      user-password: ${{ vars.USER_PASSWORD }}
      user-seed: ${{ vars.USER_SEED }}

  distribute_android:
    uses: ForkbombEu/ship-capacitor-apps/.github/workflows/ship_android.yml@main
    needs: tests
    with:
      backend-url: ${{ github.env.test.vars.PUBLIC_BACKEND_URL }}
      lane: alpha
      package-name: com.didroom.wallet
    secrets:
      keystore-file: ${{ secrets.BUNDLE_BETA_PLAYSTORE }}
      service-account: ${{ secrets.PLAYSTORE_SERVICE_ACCOUNT }}
      keystore-alias: ${{ secrets.BUNDLE_BETA_PLAYSTORE_ALIAS }}
      keystore-password: ${{ secrets.BUNDLE_BETA_PASSWORD }}
      keystore-key-password: ${{ secrets.BUNDLE_BETA_PASSWORD }}


  distribute_ios:
    uses: ForkbombEu/ship-capacitor-apps/.github/workflows/ship_ios.yml@main
    with:
      backend-url: ${{github.env.test.vars.PUBLIC_BACKEND_URL}}
      lane: ios testflight
      initial-build-number: "3"
      DEMO_USER: ${{github.env.test.vars.DEMO_USER}}
      DEMO_PASSWORD: ${{github.env.test.vars.DEMO_PASSWORD}}
      CONTACT_EMAIL: info@forkbomb.eu
      CONTACT_FIRST_NAME: Andrea
      CONTACT_LAST_NAME: D'Intino
      CONTACT_PHONE: "+4521627918"
    secrets:
      APP_STORE_CONNECT_TEAM_ID: ${{ secrets.APP_STORE_CONNECT_TEAM_ID }}
      BUNDLE_IDENTIFIER: ${{ secrets.BUNDLE_IDENTIFIER }}
      BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_BUILD_CERTIFICATE }}
      BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_BUILD_PROVISION_PROFILE }}
      APPLE_KEY_ID: ${{ secrets.APPLE_KEY_ID }}
      APPLE_ISSUER_ID: ${{ secrets.APPLE_ISSUER_ID }}
      APPLE_KEY_CONTENT: ${{ secrets.APPLE_KEY_CONTENT }}
      APPLE_PROFILE_NAME: ${{ secrets.APPLE_PROFILE_NAME }}
      P12_PASSWORD: ${{ secrets.P12_PASSWORD }}

  semantic-release:
    permissions:
      contents: write
    needs: [distribute_android, distribute_ios]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      release: ${{ steps.tag_release.outputs.release }}
      version: ${{ steps.tag_release.outputs.version }}
    steps:
      - uses: dyne/pnpm@main
        with:
          submodules: true
          node-version: '20.11.1'
      - name: Tag release
        id: tag_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release >semantic-release.log
          cat semantic-release.log
          if [[ `git tag --points-at HEAD` == "" ]]; then
            echo "release=False" >> $GITHUB_OUTPUT
          else
            echo "release=True" >> $GITHUB_OUTPUT
            awk '/Published release/ { printf("version=v%s\n",$8) }' semantic-release.log >> $GITHUB_OUTPUT
          fi
          echo "Result"
          cat $GITHUB_OUTPUT

  draft-release:
    permissions:
      contents: write
    needs: semantic-release
    runs-on: ubuntu-latest
    if: ${{ needs.semantic-release.outputs.release == 'True' }}
    steps:
      - name: download binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: |
            release
      - name: relase all binary artifacts
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release/artifact/*
            release/ios-release/*
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          generate_release_notes: true
          tag_name: ${{ needs.semantic-release.outputs.version }}
